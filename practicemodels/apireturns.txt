{"Predictions": "{\n  \"predictions\": \"[0 1 1 1 1]\"\n}\n", "Scoring": "<!doctype html>\n<html lang=en>\n  <head>\n    <title>FileNotFoundError: [Errno 2] No such file or directory: 'models/trainedmodel.pkl'\n // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"bqqHRfmDIBNqUAjwkQmi\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>FileNotFoundError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">FileNotFoundError: [Errno 2] No such file or directory: &#39;models/trainedmodel.pkl&#39;\n</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  <h3></h3>\n  <ul><li><div class=\"frame\" id=\"frame-139632641048160\">\n  <h4>File <cite class=\"filename\">\"/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2548</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-139632638285008\">\n  <h4>File <cite class=\"filename\">\"/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2528</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-139632638285120\">\n  <h4>File <cite class=\"filename\">\"/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2525</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-139632638285232\">\n  <h4>File <cite class=\"filename\">\"/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1822</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-139632638285344\">\n  <h4>File <cite class=\"filename\">\"/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1820</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-139632638285456\">\n  <h4>File <cite class=\"filename\">\"/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1796</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-139632638285568\">\n  <h4>File <cite class=\"filename\">\"/home/laurent/GitHub/Dynamic_risk_assessment_system/app.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">get_score</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>#######################Scoring Endpoint</pre>\n<pre class=\"line before\"><span class=\"ws\"></span>@app.route(&#34;/scoring&#34;, methods=[&#39;GET&#39;,&#39;OPTIONS&#39;])</pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def get_score():</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>#check the score of the deployed model</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>return {&#39;F1 score&#39;: scoring.score_model()}</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>#######################Summary Statistics Endpoint</pre>\n<pre class=\"line after\"><span class=\"ws\"></span>@app.route(&#34;/summarystats&#34;, methods=[&#39;GET&#39;,&#39;OPTIONS&#39;])</pre>\n<pre class=\"line after\"><span class=\"ws\"></span>def get_stats():</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>#check means, medians, and modes for each column</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-139632638288032\">\n  <h4>File <cite class=\"filename\">\"/home/laurent/GitHub/Dynamic_risk_assessment_system/scoring.py\"</cite>,\n      line <em class=\"line\">28</em>,\n      in <code class=\"function\">score_model</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>#this function should take a trained model, load test data, and calculate an F1 score for the model relative to the test data</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>#it should write the result to the latestscore.txt file</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span># load trained model</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>modelpath = os.path.join(model_path, &#39;trainedmodel.pkl&#39;)</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>with open(modelpath, &#39;rb&#39;) as f:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>model = pickle.load(f)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span># segregate test dataset</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>X, y = segregate_dataset(testdata)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n</ul>\n  <blockquote>FileNotFoundError: [Errno 2] No such file or directory: &#39;models/trainedmodel.pkl&#39;\n</blockquote>\n</div>\n\n<div class=\"plain\">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &#34;/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py&#34;, line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &#34;/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py&#34;, line 2528, in wsgi_app\n    response = self.handle_exception(e)\n  File &#34;/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py&#34;, line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n  File &#34;/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py&#34;, line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &#34;/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py&#34;, line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &#34;/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py&#34;, line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n  File &#34;/home/laurent/GitHub/Dynamic_risk_assessment_system/app.py&#34;, line 44, in get_score\n    return {&#39;F1 score&#39;: scoring.score_model()}\n  File &#34;/home/laurent/GitHub/Dynamic_risk_assessment_system/scoring.py&#34;, line 28, in score_model\n    with open(modelpath, &#39;rb&#39;) as f:\nFileNotFoundError: [Errno 2] No such file or directory: &#39;models/trainedmodel.pkl&#39;\n</textarea>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py\", line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py\", line 2528, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py\", line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py\", line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py\", line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/home/laurent/anaconda3/envs/DVC/lib/python3.10/site-packages/flask/app.py\", line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n  File \"/home/laurent/GitHub/Dynamic_risk_assessment_system/app.py\", line 44, in get_score\n    return {'F1 score': scoring.score_model()}\n  File \"/home/laurent/GitHub/Dynamic_risk_assessment_system/scoring.py\", line 28, in score_model\n    with open(modelpath, 'rb') as f:\nFileNotFoundError: [Errno 2] No such file or directory: 'models/trainedmodel.pkl'\n\n\n-->\n", "Statistics": "{\n  \"key statistics\": {\n    \"lastmonth_activity\": {\n      \"mean\": 165.65384615384616,\n      \"median\": 73.0,\n      \"std\": 284.0332293669446\n    },\n    \"lastyear_activity\": {\n      \"mean\": 1502.923076923077,\n      \"median\": 955.0,\n      \"std\": 2192.64495845683\n    },\n    \"number_of_employees\": {\n      \"mean\": 26.884615384615383,\n      \"median\": 14.0,\n      \"std\": 31.35388578543581\n    }\n  }\n}\n", "Diagnostics": "{\n  \"dependency check\": [\n    {\n      \"Module\": \"click\",\n      \"Version\": \"7.1.2\",\n      \"Vlatest\": \"8.1.3\"\n    },\n    {\n      \"Module\": \"cycler\",\n      \"Version\": \"0.10.0\",\n      \"Vlatest\": \"0.11.0\"\n    },\n    {\n      \"Module\": \"Flask\",\n      \"Version\": \"1.1.2\",\n      \"Vlatest\": \"2.2.2\"\n    },\n    {\n      \"Module\": \"itsdangerous\",\n      \"Version\": \"1.1.0\",\n      \"Vlatest\": \"2.1.2\"\n    },\n    {\n      \"Module\": \"Jinja2\",\n      \"Version\": \"2.11.3\",\n      \"Vlatest\": \"3.1.2\"\n    },\n    {\n      \"Module\": \"joblib\",\n      \"Version\": \"1.0.1\",\n      \"Vlatest\": \"1.2.0\"\n    },\n    {\n      \"Module\": \"kiwisolver\",\n      \"Version\": \"1.3.1\",\n      \"Vlatest\": \"1.4.4\"\n    },\n    {\n      \"Module\": \"MarkupSafe\",\n      \"Version\": \"1.1.1\",\n      \"Vlatest\": \"2.1.1\"\n    },\n    {\n      \"Module\": \"matplotlib\",\n      \"Version\": \"3.3.4\",\n      \"Vlatest\": \"3.6.2\"\n    },\n    {\n      \"Module\": \"numpy\",\n      \"Version\": \"1.20.1\",\n      \"Vlatest\": \"1.24.0\"\n    },\n    {\n      \"Module\": \"pandas\",\n      \"Version\": \"1.2.2\",\n      \"Vlatest\": \"1.5.2\"\n    },\n    {\n      \"Module\": \"Pillow\",\n      \"Version\": \"8.1.0\",\n      \"Vlatest\": \"9.3.0\"\n    },\n    {\n      \"Module\": \"pyparsing\",\n      \"Version\": \"2.4.7\",\n      \"Vlatest\": \"3.0.9\"\n    },\n    {\n      \"Module\": \"python-dateutil\",\n      \"Version\": \"2.8.1\",\n      \"Vlatest\": \"2.8.2\"\n    },\n    {\n      \"Module\": \"pytz\",\n      \"Version\": \"2021.1\",\n      \"Vlatest\": \"2022.7\"\n    },\n    {\n      \"Module\": \"scikit-learn\",\n      \"Version\": \"0.24.1\",\n      \"Vlatest\": \"1.2.0\"\n    },\n    {\n      \"Module\": \"scipy\",\n      \"Version\": \"1.6.1\",\n      \"Vlatest\": \"1.9.3\"\n    },\n    {\n      \"Module\": \"seaborn\",\n      \"Version\": \"0.11.1\",\n      \"Vlatest\": \"0.12.1\"\n    },\n    {\n      \"Module\": \"six\",\n      \"Version\": \"1.15.0\",\n      \"Vlatest\": \"1.16.0\"\n    },\n    {\n      \"Module\": \"threadpoolctl\",\n      \"Version\": \"2.1.0\",\n      \"Vlatest\": \"3.1.0\"\n    },\n    {\n      \"Module\": \"Werkzeug\",\n      \"Version\": \"1.0.1\",\n      \"Vlatest\": \"2.2.2\"\n    }\n  ],\n  \"execution time\": {\n    \"ingestion step\": 0.2985791999963112,\n    \"training step\": 0.774832500028424\n  },\n  \"missing data\": {\n    \"exited\": 0.0,\n    \"lastmonth_activity\": 0.0,\n    \"lastyear_activity\": 0.0,\n    \"number_of_employees\": 0.0\n  }\n}\n"}